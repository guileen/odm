ODM:
    ✔ Design Document @done(20-04-29 18:54)
    ✔ Interface Design @done(20-04-29 18:54)
    ✔ 重新建一个仓库，之前提交了不该提交的 test 文件 @done(20-05-01 15:07)
    ✔ types 这个包名感觉容易冲突， @done(20-05-01 15:07)
    ☐ 优化异常处理使用 fmt.Errorf("xxx%w", err) @high 
    Design:
        ✔ 将方言和接口分开 DB，odm.Open()出来的DB包含易用性接口，但各个方言实现，只需要考虑底层的 @done(20-05-02 21:49)
    Table:
        ✔ Test case @done(20-05-01 15:07)
        ✔ Insert @done(20-05-01 15:06)
        ✔ Update @done(20-05-01 15:06)
        ✔ Get @done(20-05-01 15:06)
        ✔ Query @done(20-05-01 15:06)
            ☐ Index query @today @critical 
            ☐ 自动填充满足limit要求的数据（循环获取）
            ☐ 分页API完整串联
        ✔ Delete @done(20-05-01 15:06)
        ✔ Example @done(20-05-01 19:41)
        ✔ Key Operation refactor. 不再需要传map @done(20-05-02 21:49)
    DB:
        ✔ CreateTable at localhost @done(20-05-02 16:40)
            ☐ 支持创建索引 @high 
            ☐ 支持 GSI @today 
            ☐ 支持 LSI @today 
        ✔ DropTable at localhost @done(20-05-02 21:49)
        ☐ TransactWrite @critical @today 
            ✔ Update @done(20-05-06 13:27)
            ☐ Put
            ☐ Delete
            ☐ ConditionCHeck
            ☐ ReturnValuesOnConditionCheckFailed
        ☐ GetTableMeta(tableName) 缓存性能优化
        ☐ TransactGet @critical 
        ☐ BatchWrite
        ☐ BatchRead @high
    ODMDB:
        ☐ 缓存反射元信息，优化性能
        ☐ 更方便的Update，传key和map @high 
        ☐ 在DB上封装类似Gorm的易用性操作
        ☐ Transaction链式操作
    连接池: 
        ✔ odm.Open() @done(20-05-01 19:41) @lasted(50s)
        ☐ !连接池 ...
        ☐ 超时等异常处理
        ☐ 理解DynamoDB的Session和直接Config的区别。
        ☐ 了解DynamoDB是长连接还是短连接
    Cache:
        ☐ 缓存层设计
    Base层:
        ☐ Apollo
        ☐ 日志（能够追踪是哪个服务调用的，调用链）
        ☐ 消耗的日志
    Schema生成:
        ☐ 数据库字段按小写下划线
    错误码规范:
        ☐ Error Codes.
    问题:
        ☐ 1.Dynamo支不支持长连接问题
        ☐ 2.根据条件同时更新多条记录的问题，批量删除
        ☐ 3.返回值1M限制？
        ☐ 4.query缓存设计

    其他任务临时记录:
        ☐ MQ封装
        ☐ Group Server